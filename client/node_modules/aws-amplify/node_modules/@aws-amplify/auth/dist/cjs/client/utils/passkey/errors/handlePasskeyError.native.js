'use strict';

// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
exports.handlePasskeyError = void 0;
const utils_1 = require("@aws-amplify/core/internals/utils");
const react_native_1 = require("@aws-amplify/react-native");
const passkeyError_1 = require("./passkeyError");
/**
 * Handles Overlapping Passkey Errors Between Registration & Authentication
 *
 * @param err unknown
 * @returns PasskeyError
 */
const handlePasskeyError = (err) => {
    if ((0, react_native_1.getIsNativeError)(err)) {
        // Relying Party / Domain Mismatch
        if (err.code === 'RELYING_PARTY_MISMATCH') {
            const { message, recoverySuggestion } = passkeyError_1.passkeyErrorMap[passkeyError_1.PasskeyErrorCode.RelyingPartyMismatch];
            return new passkeyError_1.PasskeyError({
                name: passkeyError_1.PasskeyErrorCode.RelyingPartyMismatch,
                message,
                recoverySuggestion,
                underlyingError: err,
            });
        }
        // Not Supported
        if (err.code === 'NOT_SUPPORTED') {
            const { message, recoverySuggestion } = passkeyError_1.passkeyErrorMap[passkeyError_1.PasskeyErrorCode.PasskeyNotSupported];
            return new passkeyError_1.PasskeyError({
                name: passkeyError_1.PasskeyErrorCode.PasskeyNotSupported,
                message,
                recoverySuggestion,
                underlyingError: err,
            });
        }
    }
    return new passkeyError_1.PasskeyError({
        name: utils_1.AmplifyErrorCode.Unknown,
        message: 'An unknown error has occurred.',
        underlyingError: err,
    });
};
exports.handlePasskeyError = handlePasskeyError;
//# sourceMappingURL=handlePasskeyError.native.js.map
